{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/task1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Task 1 GDPR Compliance Validator\r\n/// @author Omitul Islam\r\n/// @notice Validates that provided hashed field names are not in the predefined blacklist\r\n/// @dev Uses a mapping of hashed field names to determine non-compliance\r\n\r\ncontract Task1 {\r\n    /// @notice Mapping to store blacklisted (non-compliant) field hashes\r\n    mapping(bytes32 => bool) private blacklistedFields;\r\n\r\n    /// @notice The address of the contract deployer (owner)\r\n    address public owner;\r\n\r\n    /// @notice Initializes the contract, sets the owner, and populates the blacklist with hardcoded hashes\r\n    constructor() {\r\n        owner = msg.sender;\r\n        \r\n        //https://coding.tools/sha256\r\n        \r\n        blacklistedFields[0x129CE50DD90BF244858763D3F10932A9F6D8A521AD4F2C946574E9A566E04054] = true; // race\r\n        blacklistedFields[0x78D733C8223CAE0A13CD2CEB2C81F589328808C6BF4FF1F99C5DBA85CB1969AD] = true; // ethnicity\r\n        blacklistedFields[0x14B40940148BC14C3643FF50290381B671590987F20D23D81296329FDFBA2F70] = true; // ethnic_origin\r\n        blacklistedFields[0x5D3575D1A0AB5B2F5EE09A5E4FBAE19BCAA9F9343659AA29603B2CBC9AB5D99D] = true; // political_view\r\n        blacklistedFields[0x4E50D0E7D9A419FAD99F94C8E1DB70A6197328F9B00DEBAACC8059C01585CA77] = true; // party_affiliation\r\n        blacklistedFields[0x139D14B61CAE91C759A05E3F8ECE2128CDC1B43D95FD48B9038000D9C1C9C178] = true; // religion\r\n        blacklistedFields[0x2B93B177B55445F513D73FF1F0F30376D6EC181BCC1BD5CD19CCCB970F4EE0D2] = true; // faith\r\n        blacklistedFields[0xF26868AFB399D3023E79FA44EF170111F5A24802FC72E67895AFB3F21E643D03] = true; // beliefs\r\n        blacklistedFields[0x6506DA55E434CC2750E73A988466A1E79A6DBECBF7DB7E0B0B1A9A4E6B255990] = true; // union_member\r\n        blacklistedFields[0x95EC00D6978967FCB5DBE9503A80ECC3CB6FFF72260D487785D39D661E5B59B9] = true; // labor_union\r\n        blacklistedFields[0xA0F654C753E25A17A44DA09F3D1EA0DA1699352F70FC9676BD1988CC42C77F9C] = true; // dna_data\r\n        blacklistedFields[0x4476E4C39678D4B41598A27487939AA5FB6F0A34DD75615EA0F2FDC3AD45AF7C] = true; // genetic_info\r\n        blacklistedFields[0x07976C2962ABB79647D29793202FECEE3D12A5C476DC9F3CFE322C5DABD8D833] = true; // genetic_code\r\n        blacklistedFields[0x44863B03E9909B7100E05B02526909A346FD7455183F6619E0FE6198C89981E0] = true; // fingerprint\r\n        blacklistedFields[0xE33FAE9F9AC1793A36D449AA25BA22CBC0748721BF1D4086D92581E8FFF9706F] = true; // iris_scan\r\n        blacklistedFields[0xE9E08ADF4A878A37BC2BAA9EA24FABF533076045D996DA9AAF5F4765D4266AA5] = true; // face_scan\r\n        blacklistedFields[0x0BD025A21DFF5177FB5A00614B6BC9C4E901CB58AD4EF08F5D983153E89B21C1] = true; // voice_pattern\r\n        blacklistedFields[0xFDF2E20AF1F856577C4DA7BBDD112E00E3203F1891517E0E48521D756AF397E1] = true; // medical_history\r\n        blacklistedFields[0xAE9C43435AFD35DA8B56911AA4F9D6810583BC5B34341336096698CC9BEB9794] = true; // health_status\r\n        blacklistedFields[0xD296ADD506BBA3096A4FC9610F514B5149710F4BCAD72F0CD5C4C7E7B45B1A1E] = true; // disability\r\n        blacklistedFields[0x8AF6DAD4C4ED3AD08A7DD9F7A6A44E7BC2D0DCF33CD8F73CBE66E6534A369EB8] = true; // sexual_orientation\r\n        blacklistedFields[0x4153081F8EA65A3D6A778C803906075523A42769DA29A297D97AB03DFD7EF27B] = true; // sexual_preference\r\n        blacklistedFields[0x950DDB2960435690C9EBF10604B5C24CAB994C7460EB0F2425881DAC74FC2B4E] = true; // sex_life\r\n        blacklistedFields[0xCE5F28B261D6DC9BE110CBB9D067FAF11BEC284ACD10BFE7170292C56DC01893] = true; // partner_gender\r\n\r\n    }\r\n\r\n    /// @notice Checks if any of the provided field hashes are blacklisted\r\n    /// @param fieldHashes An array of hashed field names to check for GDPR compliance\r\n    /// @return Returns false if any field is blacklisted, true otherwise!\r\n    function isCompliant(bytes32[] calldata fieldHashes) external view returns (bool) {\r\n        for (uint i = 0; i < fieldHashes.length; i++) {\r\n            if (blacklistedFields[fieldHashes[i]]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/task2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\n/// @title Task 2 Validator Contract\r\n/// @author Al Fahim\r\n/// @notice Validates that each expiry date is at least 6 months after the disbursed date\r\n/// @dev Uses a fixed time difference of 6 months (15552000 seconds)\r\n\r\n\r\n/// @notice Error thrown when the expiry date is not more than 6 months after the disbursed date\r\nerror TaskTwo_RulesViolated();\r\n\r\ncontract Task2 {\r\n\r\n    /// @notice The minimum required time difference between disbursed and expiry dates (6 months)\r\n    uint256 constant timeDifference = 15552000; // 6 months in seconds\r\n\r\n    /// @notice Structure to represent disbursed and expiry dates\r\n    /// @param expiryDate The date when the item or policy expires (as a Unix timestamp)\r\n    /// @param disbursedDate The date when the item or policy was issued/disbursed (as a Unix timestamp)\r\n    struct DateObj {\r\n        uint256 expiryDate;\r\n        uint256 disbursedDate;\r\n    }\r\n\r\n    /// @notice Validates that the expiry date is more than 6 months after the disbursed date for each item\r\n    /// @dev Reverts with TaskTwo_RulesViolated if any date pair violates the rule\r\n    /// @param dates An array of DateObj structs containing expiry and disbursed dates\r\n    function validate(DateObj[] memory dates) external pure {\r\n        uint256 n = dates.length;\r\n        for (uint256 i = 0; i < n; i++) {\r\n            uint256 diff = dates[i].expiryDate - dates[i].disbursedDate;\r\n            if (diff <= timeDifference) {\r\n                revert TaskTwo_RulesViolated();\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/task3.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/// @title Task3 Contract\r\n/// @author Samanta Karmaker\r\n/// @notice This contract emits events for creation and update hashes, storing only the latest hashes on-chain.\r\n/// @dev Only the latest hashes are stored; full history is available off-chain via events.\r\n\r\ncontract Task3 is Ownable {\r\n    /**\r\n     * @notice Initializes the contract setting the deployer as the initial owner.\r\n     * @param initialOwner The address to be set as the initial owner of the contract.\r\n     */\r\n    constructor(address initialOwner) Ownable(initialOwner) {}\r\n\r\n    /// @notice Stores the latest creation hash\r\n    string public latestCreationHash;\r\n\r\n    /// @notice Stores the latest update hash\r\n    string public latestUpdateHash;\r\n\r\n    /// @notice Emitted when a new creation hash is set\r\n    /// @param id the creation batch identifier\r\n    /// @param hash The hash representing the creation batch\r\n    event CreationHashUpdated(uint256 indexed id, string hash);\r\n\r\n    /// @notice Emitted when a new update hash is set\r\n    /// @param id the update batch identifier\r\n    /// @param hash The hash representing the update batch\r\n    event UpdateHashUpdated(uint256 indexed id, string hash);\r\n\r\n    /// @notice Sets the latest creation hash and emits an event\r\n    /// @param id the creation batch identifier\r\n    /// @param hash The hash value to store and emit\r\n    function create(uint256 id, string memory hash) external onlyOwner {\r\n        latestCreationHash = hash;\r\n        emit CreationHashUpdated(id, hash);\r\n    }\r\n\r\n    /// @notice Sets the latest update hash and emits an event\r\n    /// @param id the update batch identifier\r\n    /// @param hash The hash value to store and emit\r\n    function update(uint256 id, string memory hash) external onlyOwner {\r\n        latestUpdateHash = hash;\r\n        emit UpdateHashUpdated(id, hash);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}