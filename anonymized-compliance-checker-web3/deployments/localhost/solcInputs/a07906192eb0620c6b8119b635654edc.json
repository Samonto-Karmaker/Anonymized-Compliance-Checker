{
  "language": "Solidity",
  "sources": {
    "contracts/task2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Task 2 Validator Contract\n/// @author Al Fahim\n/// @notice Validates that each expiry date is at least 6 months after the disbursed date\n/// @dev Uses a fixed time difference of 6 months (15552000 seconds)\n\ncontract Task2 {\n\n    /// @notice Error thrown when the expiry date is not more than 6 months after the disbursed date\n    error TaskTwo_RulesViolated();\n\n    /// @notice The minimum required time difference between disbursed and expiry dates (6 months)\n    uint256 timeDifferance = 15552000; // 6 months in seconds\n\n    /// @notice Structure to represent disbursed and expiry dates\n    /// @param expiryDate The date when the item or policy expires (as a Unix timestamp)\n    /// @param disbursedDate The date when the item or policy was issued/disbursed (as a Unix timestamp)\n    struct DateObj {\n        uint256 expiryDate;\n        uint256 disbursedDate;\n    }\n\n    /// @notice Validates that the expiry date is more than 6 months after the disbursed date for each item\n    /// @dev Reverts with TaskTwo_RulesViolated if any date pair violates the rule\n    /// @param dates An array of DateObj structs containing expiry and disbursed dates\n    function validate(DateObj[] memory dates) external view {\n        uint256 n = dates.length;\n        for (uint256 i = 0; i < n; i++) {\n            uint256 diff = dates[i].expiryDate - dates[i].disbursedDate;\n            if (diff <= timeDifferance) {\n                revert TaskTwo_RulesViolated();\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}